package Example::Person::PhoneNumber;

use strict;
use warnings;
use Proto::PL::Runtime;
use Carp qw(croak);

our @ISA = qw(Proto::PL::Runtime::Message);


use constant FIELD_NUMBER => 1;
use constant FIELD_TYPE => 2;

sub new {
    my ($class, %args) = @_;
    my $self = $class->SUPER::new(%args);
    
    # Initialize field values
    
    return $self;
}

sub number {
    my ($self, $value) = @_;
    
    if (@_ > 1) {
        $self->{number} = $value;
        $self->{_present}{number} = 1;
        return $self;
    }
    
    return $self->{number};
}

sub type {
    my ($self, $value) = @_;
    
    if (@_ > 1) {
        $self->{type} = $value;
        $self->{_present}{type} = 1;
        return $self;
    }
    
    return $self->{type};
}

sub _encode_fields {
    my ($self) = @_;
    my $buffer = '';
    
    # Encode field: number
    if (defined $self->{number}) {
        $buffer .= Proto::PL::Runtime::_encode_tag(1, 2);
        $buffer .= Proto::PL::Runtime::_encode_string($self->{number});
    }
    
    # Encode field: type
    if (defined $self->{type}) {
        $buffer .= Proto::PL::Runtime::_encode_tag(2, 0);
        $buffer .= Proto::PL::Runtime::_encode_varint($self->{type});
    }
    
    
    return $buffer;
}

sub _decode_field {
    my ($self, $field_num, $wire_type, $value) = @_;
    
    if ($field_num == 1) {
        if ($wire_type == 2) {
            my ($decoded_value, $consumed) = (Proto::PL::Runtime::_decode_string($value), length($value));
            $self->{number} = $decoded_value;
            $self->{_present}{number} = 1;
            return 1;
        }
    }
    
    if ($field_num == 2) {
        if ($wire_type == 0) {
            my ($decoded_value, $consumed) = $value, 0;
            $self->{type} = $decoded_value;
            $self->{_present}{type} = 1;
            return 1;
        }
    }
    
    
    return 0;  # Unknown field
}

sub _fields_to_hash {
    my ($self, $hash) = @_;
    
    $hash->{number} = $self->{number} if defined $self->{number};
    $hash->{type} = $self->{type} if defined $self->{type};
}


1;

__END__

=head1 NAME

Example::Person::PhoneNumber - Protocol Buffers message class

=head1 SYNOPSIS

    use Example::Person::PhoneNumber;
    
    my $msg = Example::Person::PhoneNumber->new();
    
    # Set fields
    $msg->number('number value');
    $msg->type('type value');
    
    # Encode to bytes
    my $bytes = $msg->encode();
    
    # Decode from bytes
    my $decoded = ${package_name}->decode($bytes);

=head1 DESCRIPTION

This class represents a Protocol Buffers message.

=head1 FIELDS

=head2 number (singular scalar)

=head2 type (singular message)


=head1 METHODS

=head2 new(%args)

Constructor. Field names can be provided as arguments.

=head2 encode()

Encodes the message to Protocol Buffers wire format.

=head2 decode($bytes)

Class method that decodes bytes in Protocol Buffers wire format.

=head2 to_hash()

Returns a hash representation of the message.

=head2 from_hash($hashref)

Class method that creates a message from a hash.

=head1 AUTHOR

Generated by pl_protoc

=cut
