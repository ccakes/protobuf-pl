#!/usr/bin/env perl

package main;

use strict;
use warnings;
use Getopt::Long qw(GetOptions);
use Pod::Usage qw(pod2usage);
use File::Spec;
use File::Basename;
use FindBin;

# Add lib to @INC
use lib File::Spec->catdir($FindBin::Bin, '..', 'lib');

use Proto::PL::Parser;
use Proto::PL::Generator;

my %opts = (
    output_dir => 'lib',
    include_paths => ['.'],
    help => 0,
    version => 0,
);

GetOptions(
    'out|output-dir=s' => \$opts{output_dir},
    'I|include-path=s@' => \$opts{include_paths},
    'h|help' => \$opts{help},
    'version' => \$opts{version},
) or pod2usage(2);

if ($opts{help}) {
    pod2usage(1);
}

if ($opts{version}) {
    print "pl_protoc version 0.01\n";
    exit 0;
}

if (@ARGV == 0) {
    print STDERR "Error: No input files specified\n";
    pod2usage(2);
}

my @proto_files = @ARGV;

# Validate input files
for my $file (@proto_files) {
    unless (-f $file) {
        die "Error: File not found: $file\n";
    }
    unless ($file =~ /\.proto$/) {
        warn "Warning: File does not have .proto extension: $file\n";
    }
}

eval {
    # Create parser and generator
    my $parser = Proto::PL::Parser->new(
        include_paths => $opts{include_paths},
    );
    
    my $generator = Proto::PL::Generator->new(
        output_dir => $opts{output_dir},
    );
    
    # Parse all files
    my %parsed_files;
    for my $file (@proto_files) {
        print "Parsing $file...\n";
        my $ast = $parser->parse_file($file);
        $parsed_files{$file} = $ast;
        $generator->add_file($ast);
    }
    
    # Generate code
    print "Generating Perl code to $opts{output_dir}...\n";
    $generator->generate_all();
    
    print "Done.\n";
};

if ($@) {
    die "Error: $@\n";
}

__END__

=head1 NAME

pl_protoc - Protocol Buffers compiler for Perl

=head1 SYNOPSIS

pl_protoc [options] proto_file...

Options:
    --out, --output-dir DIR    Output directory (default: lib)
    -I, --include-path DIR     Add directory to import search path
    -h, --help                 Show this help message
    --version                  Show version information

=head1 DESCRIPTION

pl_protoc is a Protocol Buffers compiler that generates pure Perl code
from .proto files. The generated code provides:

=over 4

=item * Message classes with encode/decode methods

=item * Enum constants

=item * Support for all proto3 features

=item * No external dependencies beyond Perl core

=back

=head1 EXAMPLES

    # Basic usage
    pl_protoc example.proto
    
    # Specify output directory
    pl_protoc --out=lib/generated example.proto
    
    # Add include paths for imports
    pl_protoc -I./protos -I./common --out=lib example.proto
    
    # Process multiple files
    pl_protoc --out=lib example.proto common.proto

=head1 GENERATED CODE

For a message named 'Person' in package 'example', pl_protoc generates:

    lib/Example/Person.pm

The generated class extends Proto::PL::Runtime::Message and provides:

=over 4

=item * new(%args) - Constructor

=item * Field accessor methods

=item * encode() - Serialize to wire format  

=item * decode($bytes) - Deserialize from wire format

=item * to_hash() / from_hash($hash) - Hash conversion

=back

=head1 REQUIREMENTS

=over 4

=item * Perl 5.10 or later

=item * Core modules only (strict, warnings, Scalar::Util, etc.)

=back

=head1 LIMITATIONS

This version supports:

=over 4

=item * Proto3 syntax

=item * Messages, enums, nested types

=item * All field types and labels

=item * Maps, oneofs, imports

=item * Proper wire format encoding/decoding

=back

Not yet supported:

=over 4

=item * Services and RPC

=item * Proto2 specific features

=item * Reflection

=item * JSON serialization

=back

=head1 AUTHOR

Generated by the pl_protoc development team

=head1 LICENSE

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
